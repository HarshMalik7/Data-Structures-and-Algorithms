//Question no. 234 on leetcode
//This is the solution to the approach I came up with first.
//We first find out the length, middle element and push half of the Linked List in a stack
//Then we compare the elements pushed into the stack with the second half of the Linked List, if any element is not equal, we return false.

class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(head == nullptr) return true;
        
        ListNode * fast = head->next;
        ListNode * slow = head;
        int size = 1;
        stack<ListNode*> stk;
        
        while(fast != nullptr){
            if(fast->next == nullptr){
                size+=1;
                stk.push(slow);
                slow=slow->next;
                fast=fast->next;
                continue;
            }
            size+=2;
            stk.push(slow);
            slow = slow->next;
            fast = fast->next->next;
        }
        
        if(size%2==0){
            while(slow != nullptr){
                if(slow->val != stk.top()->val){
                    return false;
                }
                else{
                    stk.pop();
                    slow=slow->next;
                }
            }
        }
        else{
            slow=slow->next;
            while(slow != nullptr){
                if(slow->val != stk.top()->val){
                    return false;
                }
                else{
                    stk.pop();
                    slow=slow->next;
                }
            }
        }
        return true;
    }
};

//Above Solution uses a stack which increases the Space Complexity of the solution, so here is another more optimised approach to the question:
//In the approach, we find the middle element like we did above, but in doing so, we flip the first half of the Linked List. The previous to slow pointer will point to the
//beginning of the reversed first half LL we have now created. Now we just compare the 2 new Linked Lists and we're done.

class Solution {
    public: 
    bool isPalindrome(ListNode* head) {
	    ListNode *slow = head, *fast = head, *prev = NULL, *temp;
	    while(fast && fast -> next){ // Finding the mid point, reversing the first half of LL, 
		    fast = fast -> next -> next,
		    temp = slow -> next, slow -> next = prev, prev = slow, slow = temp;
        }
	    slow = (fast ? slow -> next : slow); // If the length is odd, slow->next will be the beginning of the second half of LL else slow itself will be the beginning.
	    while(slow){ // Comparison of the Linked List
		    if(slow -> val != prev -> val) return false;
		    else slow = slow -> next, prev = prev -> next;
	    }
        return true;
    }
};
