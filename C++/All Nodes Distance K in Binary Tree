//Question 863 on Leetcode

class Solution {
public:
  void printAtDist(TreeNode *root, int k, vector<int> &ans){
      if(root == nullptr) return;
    
      if(k == 0 && root != nullptr){
          ans.push_back(root->val);
          return;
      }
      
      printAtDist(root->left, k-1, ans);
      printAtDist(root->right, k-1, ans);
    
  }

  void findPath(TreeNode *root, int node, vector<pair<TreeNode*, char>> &path){
      if(root == nullptr){
          //path.clear();
          return;
      }
      if(root->val == node){
          pair<TreeNode *, char> a(root, 'D');
          path.push_back(a);
          return;
      }

      findPath(root->left, node, path);
      if(!path.empty()){
       	  pair<TreeNode *, char> a(root, 'L');
         	path.push_back(a);
      }
      if(path.empty()){
          findPath(root->right, node, path);
          if(!path.empty()){
              pair<TreeNode *, char> a(root, 'R');
              path.push_back(a);
          }
      }
      return;
  }

  vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
      vector<int> ans;
      if(root == nullptr){
         return ans;
      }
      int node = target->val;
      vector<pair<TreeNode*, char>> path;
    
      findPath(root, node, path);
      pair<TreeNode*, char> curr;
      for(int i = 0; i < path.size(); i++){
          curr = path[i];
          if(curr.second == 'D'){
              if(k == 0){
                  ans.push_back(curr.first->val);
                  break;
              }
              printAtDist(curr.first, k, ans);
          }
          else if(curr.second == 'R'){
              if(k-i == 0){
                  ans.push_back(curr.first->val);
                  break;
              }
              else if(curr.first->left != nullptr){
                  printAtDist(curr.first->left, k-i-1, ans);
              }
          }
          else if(curr.second == 'L'){
              if(k-i == 0){
                  ans.push_back(curr.first->val);
                  break;
              }
              else if(curr.first->right != nullptr){
                  printAtDist(curr.first->right, k-i-1, ans);
              }
          }
      } 
      return ans;
  }
};
